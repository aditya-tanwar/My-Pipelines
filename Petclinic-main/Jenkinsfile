// Jenkins pipeline for devsecops using maven builds for containerized and non-containerized applications.
pipeline {
    agent {
        label 'linux'
    } // End of agent


// this is the environment section // NEED TO LEARN   
    environment{
        SCANNER_HOME= tool 'sonar-scanner'   // defining the home path of the tool 
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', changelog: false, credentialsId: 'github creds', poll: false, url: 'https://github.com/aditya-tanwar/my_pipelines.git'
            }
        } // End of Git Checkout stage
        
        stage('Maven Validation & Compilation') {
            steps {
                sh "cd Petclinic-main && mvn validate" // validate the project is correct and all necessary information is available 
                sh "cd Petclinic-main && mvn clean compile -DskipTests=true" // compiles the source code of the project ,  -DskipTests=true compiles the tests but doesn't runs them
            }
        } // End of Maven Compilation stage
        
        stage('Maven Unit testing') {
            steps {
                sh "cd Petclinic-main && mvn test" // testing the compiled code 
            }
        } // End of Maven Unit Testing stage
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') { // This block is used when the sonarqube is configured inside of the managejenkins>system settings.
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Petclinic \
                    -Dsonar.java.binaries=. \
                    -Dsonar.sources=./Petclinic-main \
                    -Dsonar.projectKey=Petclinic '''
    
                } // End of withSonarQubeEnv block
            
            }
        } // End of the SonarQube Analysis stage

        
        stage('Maven Build & Verification') { // For the Non Container Applications 
            steps {
                sh "cd Petclinic-main && mvn clean package -DskipTests=true" // build the maven project and create JAR & WAR file.
                sh "cd Petclinic-main && mvn verify"
            }
        } // End of the Maven Build & Verification stage

        stage('OWASP Scan') { // Owasp Dependency Check
            steps {
                dependencyCheck additionalArguments: '--scan ./Petclinic-main/', odcInstallation: 'owasp'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        } // End of OWASP Scan stage   
        
        stage('Docker Build') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'github creds', toolName: 'Docker') {
                        sh "docker build -t petclinic:latest -f Petclinic-main/Dockerfile ."
                    } // End of withDockerRegistry block       
                }
            }
        } // End of Docker Build stage

        stage('Docker Tag & Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'github creds', toolName: 'Docker') {
                        sh "docker tag petclinic:latest adityatanwar03/petclinic:latest"
                        sh "docker push adityatanwar03/petclinic:latest" // Pushing the image to dockerhub 
                    } // End of withDockerRegistry block       
                }
            }
        } // End of Docker Tag & Push 

        stage("Trivy Scan"){
            steps{
                sh " trivy image -f json -o Petclinic-main/trivy-results.json adijaiswal/pet-clinic123:latest"
            }
        } // End of Trivy Scan stage
                
    } // End of Stages
}
